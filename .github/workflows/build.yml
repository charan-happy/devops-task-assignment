name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch: 

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform  
        uses: hashicorp/setup-terraform@v2  
        with:  
          terraform_version: latest
      
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1

      - name: checking terraform version
        run: terraform version

      - name: Terraform init
        run: cd ./job-task/INFRA-SETUP-EKS-Terraform && terraform init
          
      - name: Terraform plan  
        id: plan
        run: |
          cd ./job-task/INFRA-SETUP-EKS-Terraform && terraform plan -no-color -input=false -out=tfplan
          echo "changes=$(terraform show -no-color tfplan | grep -q 'No changes.' && echo 'false' || echo 'true')" >> $GITHUB_OUTPUT  
        env:  
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}  
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}  
          AWS_REGION: ${{ secrets.AWS_REGION }}  

      - name: Terraform Apply  
        run: cd ./job-task/INFRA-SETUP-EKS-Terraform && terraform apply --auto-approve
        if: steps.plan.outputs.changes == 'true' 
        env:  
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}  
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}  
          AWS_REGION: ${{ secrets.AWS_REGION }}  

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name : run build_and_push.sh file
        run : bash build_and_push.sh

      - name: Build and push Docker image
        run: |
          docker build -t hello-kubernetes:${{ github.sha }} .
          docker tag hello-kubernetes:${{ github.sha }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-1.amazonaws.com/hello-kubernetes:${{ github.sha }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-1.amazonaws.com/hello-kubernetes:${{ github.sha }}

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1

      - name: Deploy to EKS
        run: |
          helm upgrade --install hello-kubernetes ./helm_chart/ --set image.repository=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-1.amazonaws.com/hello-kubernetes --set image.tag=${{ github.sha }}

      - name: Install Prometheus and Grafana
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update
          helm install prometheus prometheus-community/prometheus
          helm install grafana grafana/grafana

      - name: Install Fluentd
        run: |
          helm repo add fluent https://fluent.github.io/helm-charts
          helm repo update
          helm install fluentd fluent/fluentd -f fluentd-values.yaml --namespace kube-system
